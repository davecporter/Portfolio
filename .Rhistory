library(tidyverse)
library(MASS)
select <- dplyr::select
library(boot)
library(ISLR)
library(mlbench)
library(GGally)
source(file.path(getwd(), 'classification_model_helpers.R'))
View(compare_class_method)
library(tidyverse)
library(MASS)
select <- dplyr::select
library(boot)
library(ISLR)
library(mlbench)
library(GGally)
source(file.path(getwd(), 'classification_model_helpers.R'))
library(tidyverse)
library(MASS)
select <- dplyr::select
library(boot)
library(ISLR)
library(mlbench)
library(GGally)
source(file.path(getwd(), 'classification_model_helpers.R'))
k_test <- 5
auto_preds <- Auto %>%
mutate(mpg01 = ifelse(mpg > median(mpg), 1, 0) %>% as.factor()) %>%
select(-name, -mpg)
compare_class_method(auto_preds, "mpg01", ".", n_trials=500, k=k_test)
View(compare_class_method)
compare_class_method(auto_preds, "mpg01", ".", n_trials=500, k=k_test)
require(devtools)
install_version("tidyverse", version = "1.2.1", repos = "http://cran.us.r-project.org")
require(devtools)
install.packages(devtools)
install.packages("devtools")
library(devtools)
install.packages("devtools")
install.packages("devtools")
install_version("gtidyverse", version = "1.2.1", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("gtidyverse", version = "1.2.1", repos = "http://cran.us.r-project.org")
install_version("tidyverse", version = "1.2.1", repos = "http://cran.us.r-project.org")
remove.packages("tidyverse")
install_version("tidyverse", version = "1.2.1", repos = "http://cran.us.r-project.org")
library(tidyverse)
library(ISLR)
library(tidyverse)
library(ISLR)
library(tidyverse)
library(ISLR)
library(tidyverse)
library(ISLR)
remove.packages("markdown")
install_version("tmarkdown", version = "0.8", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("tmarkdown", version = "0.8", repos = "http://cran.us.r-project.org")
install_version("markdown", version = "0.8", repos = "http://cran.us.r-project.org")
remove.packages("rmarkdown")
install_version("rmarkdown", version = "1.6", repos = "http://cran.us.r-project.org")
install_version("rmarkdown", version = "1.6", repos = "http://cran.us.r-project.org")
library(tidyverse)
library(ISLR)
# odds vs probability
plotr <- data.frame(p_X = seq(0,0.99,0.01)) %>% mutate(odds = p_X / (1 - p_X))
ggplot(plotr, aes(p_X, odds)) + geom_line()
summary(glm(default ~ balance, family = binomial, data=Default))
b0 <- -10.65
b1 <- 5.5e-3
logistic_function <- function(b0, b1, X) { # (eq 4.2)
e <- exp(b0 + b1 * X)
e / (1 + e)
}
plotr <- data.frame(balance=Default$balance, P_default=logistic_function(b0=b0, b1=b1, Default$balance))
ggplot(plotr, aes(balance, P_default)) + geom_line() # (equivalent to fig 4.2)
exp(b1) # (eq 4.3)
odds <- 4
new_odds <- odds * exp(b1)
delta_odds <- new_odds - odds
delta_odds
(new_odds / (1 + new_odds)) - (odds / (1 + odds))
X_at_odds <- (log(odds) - b0) / b1
X_at_odds
logistic_function(b0, b1, X_at_odds + 1) - logistic_function(b0, b1, X_at_odds)
logistic_regression <- function(nA, meanA=0, sdA=1, nB, meanB=0, sdB=1,
p_cutoff=0.5, seed=round(runif(1)*1e6), show_conf_matrix=TRUE){
set.seed(seed)
# initialise data, cl = class, p1d = probability density
df <- data.frame(X = c(rnorm(nA, meanA, sdA), rnorm(nB, meanB, sdB)), cl = c(rep("A", nA), rep("B", nB))) %>%
mutate(p1d = ifelse(cl == "A", dnorm(X, meanA, sdA), dnorm(X, meanB, sdB)))
# fit logistic regression model and extract coefficients
logistic_reg <- glm(cl ~ X, data=df, family = "binomial")
summ_log_reg <- summary(logistic_reg)
b0 <- logistic_reg$coefficients[1]
b1 <- logistic_reg$coefficients[2]
p_val <- summ_log_reg$coefficients[2,4]
# calculate probabilities and classify predictions using logistic function
df <- df %>% mutate(p_X = logistic_function(b0, b1, X),
pred_cl = ifelse(p_X < p_cutoff, "A", "B"))
# create confusion matrix
conf_matrix <- table(df %>% select(pred_cl, cl))
prop_matrix_row <- prop.table(conf_matrix, margin=1)
prop_matrix_col <- prop.table(conf_matrix, margin=2)
accuracy <- mean(df$pred_cl == df$cl)
precision <- prop_matrix_row[1,1] # positive predictive value
sensitivity <- prop_matrix_col[1,1] # true positive rate
specificity <- prop_matrix_col[2,2] # true negative rate
annotation <- paste(paste("p value =", round(p_val, 2)),
paste("p(X) cutoff =", p_cutoff),
paste("accuracy =", round(accuracy, 2)),
paste("precision =", round(precision, 2)),
paste("true A rate =", round(sensitivity, 2)),
paste("true B rate =", round(specificity, 2)),
sep = "\n")
if(show_conf_matrix==TRUE) print(conf_matrix)
# graphical output
ggplot(df, aes(X, col=cl)) +
geom_rug(alpha=0.1) + # data points
geom_density(aes(y=..count../max(..count..))) + # density of data point counts
geom_density(aes(y=..count.., fill=cl), position="fill", alpha=0.1, linetype=2) + # prob. area of data points
geom_line(aes(X, p_X), colour="black") + # logistic function of data points
geom_rug(aes(X, col=pred_cl), alpha=0.1, sides="t") + # predictions
annotate("text", x=min(df$X)*0.5, y=0.8, label=annotation) +
labs(y="normalised count & p(X)")
}
logistic_regression(nA=10000, nB=10000, meanB=1)
install_version("stats", version = "3.3.3", repos = "http://cran.us.r-project.org")
install_version("stats", version = "3.3.3", repos = "R-core R-core@R-project.org")
R.Version()
